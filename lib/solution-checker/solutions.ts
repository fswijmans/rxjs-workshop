import { SolutionDefinition, ObservableEvent, } from './solution-definition.model';
import {
    complete,
    floatingPointNumberEqualityChecker,
    next,
    numberFormatted,
    regularIntervalEvents,
    stackJoin
} from './solution-definition-utils';
import { Cake, Ingredient, Circle, Shape, TrainMovementAction, MotionType } from '../domain/index';

export const SOLUTION_MAP = new Map<string, SolutionDefinition<any>>();

SOLUTION_MAP.set('3', {
    expectedEvents: [
        next(4, 1500),
        next(6, 2500),
        next(2, 3000),
        next(2, 3500),
        next(4, 5000),
        next(8, 5500),
        complete(5500)
    ]
});

SOLUTION_MAP.set('4', {
    expectedEvents: [
        next(1, 500),
        next(7, 2000),
        next(2, 3000),
        next(2, 3500),
        next(7, 4000),
        next(3, 4500),
        complete(5500)
    ]
});

SOLUTION_MAP.set('5', {
    expectedEvents: regularIntervalEvents(500, 1, 81, 16, 49, 36, 4, 4, 49, 9, 16, 64)
});

SOLUTION_MAP.set('6', {
    expectedEvents: regularIntervalEvents(500, 1, 10, 14, 21, 27, 29, 31, 38, 41, 45, 53)
});

SOLUTION_MAP.set('7', {
    expectedEvents: regularIntervalEvents(500, ...stackJoin(
        ['Jirble:', 'spill', 'a', 'liquid', 'by', 'shaking', 'or', 'unsteady', 'moving', 'of', 'the', 'vessel'], ' '
    ))
});

SOLUTION_MAP.set('8', {
    expectedEvents: [
        next(188.50, 500),
        next(251.33, 1000),
        next(2000.00, 2000),
        next(3600.00, 3000),
        next(120.00, 3500),
        next(145.21, 4000),
        next(1400.00, 4500),
        complete(4500)
    ],
    equalityChecker: floatingPointNumberEqualityChecker(0.001),
    valueFormatter: numberFormatted(2)
});

SOLUTION_MAP.set('9', {
    expectedEvents: [
        next(new Circle('Circle 40', 40), 4500),
        complete(4500)
    ],
    valueFormatter: (shape: Shape) => `${shape.name}: ${shape.area.toFixed(2)}`
});

SOLUTION_MAP.set('10', {
    expectedEvents: regularIntervalEvents(500, 2827.43, 3926.99, 2751.33, 2313.50, 1890.80, 1875.66, 1736.28, 1631.75, 1528.22),
    equalityChecker: floatingPointNumberEqualityChecker(0.001),
    valueFormatter: numberFormatted(2)
});

SOLUTION_MAP.set('11', {
    expectedEvents: [
        next(
            new Cake('Fruitcake')
                .addIngredient(new Ingredient('Pineapple', 'FRUIT'))
                .addIngredient(new Ingredient('Strawberry', 'FRUIT'))
                .bake(),
            2500
        ),
        complete(2500)
    ]
});

SOLUTION_MAP.set('12', {
    expectedEvents: regularIntervalEvents(500,
        'Points: 0 - total: 0',
        'Points: 3 - total: 3',
        'Points: 0 - total: 3',
        'Points: 3 - total: 6',
        'Points: 1 - total: 7',
        'Points: 3 - total: 10',
        'Points: 0 - total: 10',
        'Points: 0 - total: 10',
        'Points: 3 - total: 13',
        'Points: 0 - total: 13'
    )
});

SOLUTION_MAP.set('13', {
    expectedEvents: regularIntervalEvents(250, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024)
});

SOLUTION_MAP.set('14', {
    expectedEvents: regularIntervalEvents(1000, 'RxJava is cool :)', 'So reactive!', 'Much stream!', 'Goodbye!')
});

// free, occupied, free, occupied, free, occupied, free, occupied, free
SOLUTION_MAP.set('15', {
    expectedEvents: [
        next('free', 0),
        next('occupied', 233),
        next('free', 3605),
        next('occupied', 3643),
        next('free', 7056),
        next('occupied', 8123),
        next('free', 9623),
        next('occupied', 9722),
        next('free', 12380),
        complete(14000)
    ]
});

SOLUTION_MAP.set('16', {
    expectedEvents: [
        next(7.5, 1000),
        next(19.0, 2000),
        next(39.0, 3000),
        next(46.5, 3500),
        complete(3500)
    ]
});

SOLUTION_MAP.set('17', {
    expectedEvents: (() => {
        const values = trainSpeeds();

        return values.reduce((result, value, index) => {
            let timestamp = (index + 1) * 100;

            if (index >= values.length - 3) {
                timestamp -= 80 + 100 * (index - values.length + 3);
            }

            result.push(next(value, timestamp));

            if (index === values.length - 1) {
                result.push(complete(timestamp));
            }

            return result;
        }, [] as ObservableEvent<number | string>[]);
    })(),
    equalityChecker: floatingPointNumberEqualityChecker(0.01),
    maxTimeDrift: 100
});

SOLUTION_MAP.set('18-a', {
    expectedEvents: [
        next(MotionType.STATIONARY, 150),
        next(MotionType.ACCELERATING, 1550),
        next(MotionType.CONSTANT_SPEED, 3400),
        next(MotionType.DECELERATING, 13950),
        next(MotionType.STATIONARY, 15800),
        complete(17200)
    ],
    maxTimeDrift: 250
});

SOLUTION_MAP.set('18-b', {
    expectedEvents: [
        next(TrainMovementAction.DEPARTING, 1550),
        next(TrainMovementAction.ARRIVING, 15800),
        complete(17200)
    ],
    maxTimeDrift: 250
});

SOLUTION_MAP.set('18-c', {
    expectedEvents: [
        next('Departing from Amersfoort (AMR)', 1550),
        next('Arriving at Utrecht Centraal (UTR)', 15800),
        complete(17200)
    ],
    maxTimeDrift: 250
});

// tslint:disable
function trainSpeeds(): (number | string)[] { return [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1104238530340043,4.397278935832883,8.394807154168667,12.392338960530964,
    16.389876064279523,20.387420173524518,24.384972996885303,28.382536243453917,32.37111964365164,36.377700840059624,40.37530560778198,
    44.37292763227149,48.370568623783235,52.36823028960847,56.36591433930912,60.36362248140733,64.36135642342802,68.3591178755326,
    72.35690854506672,76.35473014175162,80.35258437286656,84.35047294763217,88.34839757439802,92.34635996319408,96.34436182050962,
    100.34240485495323,104.34049077661008,108.33862129255641,112.33679811123557,116.33502294217648,120.33329749264672,124.33162347176965,
    128.33000258740117,132.32843654851604,136.28906898816632,139.21494954617668,139.92637766421052,139.92707534121703,139.92777301550788,
    139.88961246300687,139.92916835946855,139.89100741596718,139.9305636964528,139.89240236086442,139.9319590247515,139.9326566868749,
    139.8944947645043,139.93405200416382,139.89588969095846,139.9354473141654,139.93614496643704,139.89798206599565,139.93754026527665,
    139.8993769737386,139.93893555579012,139.93963319867805,139.90146932022148,139.94102847895877,139.90286420889151,139.94242375117236,
    139.9431213843153,139.9049565278054,139.94451664515617,139.9063513977182,139.94591189880904,139.9466095221053,139.90844368786458,
    139.94800476479554,139.94870238330972,139.9493999989561,139.95009761374615,139.9119308008064,139.95149283616462,139.95219044571067,
    139.9528880523312,139.95358565727327,139.91541786683644,139.95498086174734,139.9556784606159,139.95637605867833,139.95707365413224,
    139.91890488517282,139.91960228302176,139.95916642952142,139.95986401752563,139.96056160317355,139.92239185710937,139.92308924521228,
    139.96265435071524,139.9633519292805,139.96404950600834,139.92587878134532,139.9265761597521,139.96614222440292,139.966839793788,
    139.96753736128508,139.9293656582377,139.93006302767543,139.9696300510495,139.9703276116647,139.97102516889234,139.93285248825845,
    139.93354984804913,139.97311783064444,139.97381538093921,139.97451292903563,139.93633927061876,139.93703662153996,139.9766055627734,
    139.97730310373439,139.9780006430089,139.93982600604295,139.94052334762557,139.98009324826182,139.98079077859097,139.98148830925186,
    139.9433126938504,139.94401002641067,139.9835808866447,139.98427840768224,139.9849759280205,139.9467993358028,139.9474966579925,
    139.98706847656373,139.98776598934694,139.98846350060867,139.95028592889204,139.95098324246877,139.9905560199904,139.9523778627611,
    139.95307517046368,139.95377247601837,139.99334602139098,139.9940435167626,139.99474100982715,139.99543850183144,139.99613599148518,
    139.99683347955266,139.99753096573792,139.9982284493567,139.99892593191493,139.99962341248292,140.00032089069327,140.0010183670142,
    140.0017158416547,140.0024133150762,140.00311078546957,140.00380825470123,140.00450572214444,140.00520318686932,140.0059006504325,
    140.00659811204864,140.00729557183263,140.00799302946754,140.00869048531385,140.00938793865066,140.0100853911859,140.0107828414136,
    140.01148028929012,140.01217773563724,140.01287518071442,140.01357262266208,140.01427006333972,140.0149675021274,140.0156649391836,
    140.0163623741341,140.017059806841,140.0177572380689,140.0184546677166,140.01915209480396,140.01984952067156,140.02054694490843,
    140.02124436637595,140.02194178631368,140.0226392040513,140.02333662031648,140.02403403411526,140.02473144639103,140.0254288568775,
    140.0261262657835,140.0268236724961,140.02752107710265,140.02821847971765,140.0289158812204,140.02961327989618,140.03031067725752,
    140.03100807282937,140.0317054663523,140.03240285783312,140.03310024690452,140.03379763522383,140.03449502077333,140.0351924047925,
    140.03588978656057,140.03658716643784,140.03728454556293,140.03798192196857,140.03867929622393,140.03937666910718,140.04007403958087,
    140.04077140816358,140.04146877563343,140.04216614064305,140.04286350386275,140.04356086462224,140.04425822447743,140.0449555820239,
    140.04565293716058,140.046350291292,140.04704764290568,140.04774499231834,140.0484423407761,140.04913968702607,140.04983703149244,
    140.05053437339058,140.05123171396662,140.05192905244914,140.05262638966,140.05332372420145,140.05402105700972,140.05471838822967,
    140.0554157169956,140.05611304479967,140.05681037014295,140.05750769318365,140.0582050151041,140.05890233451325,140.0595996520812,
    140.0602969680167,140.0609942824277,140.06169159416888,140.06238890447977,140.06308621300656,140.06378351917337,140.06448082349894,
    140.06517812666,140.06587542746098,140.06657272575035,140.06727002323558,140.06796731789254,140.0686646114927,140.06936190299197,
    140.07005919228263,140.07075647911873,140.07145376530207,140.07215104850545,140.0728483300759,140.07354561079143,139.48401260236372,
    136.75291162005033,132.7570669425613,128.7555053332442,124.75388878646906,120.75221900984423,116.75049771115948,112.74872659970323,
    108.74690738104391,104.74504176479236,100.74313145814388,96.74117816839082,92.73918360378224,88.73714947209635,84.7350774804698,
    80.73296933695407,76.7308267492262,72.7286514251015,68.72644507218708,64.7242093975967,60.721946109793,56.719656915867716,
    52.717343523643045,48.715007640090214,44.71265097393624,40.710275232350874,36.70788212248992,32.70547335176837,28.703050627588482,
    24.700615659162136,20.69817015176322,16.69571581479694,12.693254355300686,8.690787480124625,4.688316897806434,1.2761238764060021,
    0.005660781926705411,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    'The train reached a maximum velocity of ~ 140 Km/h.'
]; }
// tslint:enable
